import os
import shutil
import numpy as np
from sklearn import preprocessing
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import cross_validate
from sklearn.model_selection import train_test_split
import pandas as pd
# 11111111111111111111111111111111111111111111111111111111111111111111111111111111
dest = r"C:\Users\me\Desktop\Project_deed"
# 22222222222222222222222222222222222222222222222222222222222222222222222222222222
files = os.listdir(dest)
print(files)
os.chdir(dest)
# # Read contents of current file
# # for i in files:
# #     with open (i) as f:
# #         print(i, f.read())
# 3333333333333333333333333333333333333333333333333333333333333333333333333333333
os.mkdir('Audio')
os.mkdir('Zipped')
os.mkdir('Data')
os.mkdir('Executables')
os.mkdir('Images')
os.mkdir('Web_Related')
os.mkdir('Presentation')
os.mkdir('Programming')
os.mkdir('Video')
# 4444444444444444444444444444444444444444444444444444444444444444444444444444444
extension = []
for i in range(len(files)):
    x = files[i].split('.',5)
    extension.append(x[-1])
print(extension)
# 5555555555555555555555555555555555555555555555555555555555555555555555555555555

df = pd.read_csv('data_set.txt')
X = np.array(df.drop(['class'],1))
y = np.array(df['class'])

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2)

clf = KNeighborsClassifier()
clf.fit(X_train,y_train)

accuracy = clf.score(X_test,y_test)
print(accuracy)



cist = []
for i in range(len(files)):
    b = list(extension[i])
    hist = np.zeros((5,), dtype=int)
    for j in range(len(b)):
        hist[j] = ord(b[j])
    chist = []
    for i in hist:
        chist.append(i)
    cist.append(chist)
    print(hist)
print(hist[0])
print(cist)

prediction = clf.predict(cist)
print(prediction)

dest1_loc = os.path.join(dest, "Audio")
dest2_loc = os.path.join(dest, "Zipped")
dest3_loc = os.path.join(dest, "Data")
dest4_loc = os.path.join(dest, "Executables")
dest5_loc = os.path.join(dest, "Images")
dest6_loc = os.path.join(dest, "Web_Related")
dest7_loc = os.path.join(dest, "Presentation")
dest8_loc = os.path.join(dest, "Programming")
dest9_loc = os.path.join(dest, "Video")

rediction = []
for i in prediction:
    rediction.append(i)
print(rediction)
print(files)
for i in range (len(rediction)):
    if rediction[i]//10 == 0:
        shutil.move(os.path.join(dest, files[i]), dest3_loc)
    elif rediction[i]//10 == 3:
        shutil.move(os.path.join(dest, files[i]), dest3_loc)
    elif rediction[i]//10 == 1:
        shutil.move(os.path.join(dest, files[i]), dest1_loc)
    elif rediction[i] // 10 == 2:
        shutil.move(os.path.join(dest, files[i]), dest2_loc)
    elif rediction[i] // 10 == 4:
        shutil.move(os.path.join(dest, files[i]), dest4_loc)
    elif rediction[i] // 10 == 5:
        shutil.move(os.path.join(dest, files[i]), dest5_loc)
    elif rediction[i] // 10 == 6:
        shutil.move(os.path.join(dest, files[i]), dest6_loc)
    elif rediction[i] // 10 == 7:
        shutil.move(os.path.join(dest, files[i]), dest7_loc)
    elif rediction[i] // 10 == 8:
        shutil.move(os.path.join(dest, files[i]), dest8_loc)
    elif rediction[i] // 10 == 9:
        shutil.move(os.path.join(dest, files[i]), dest9_loc)
    else:
        pass
list_sub_dir = [dest1_loc,dest2_loc,dest3_loc,dest4_loc,dest5_loc,dest6_loc,dest7_loc,dest8_loc,dest9_loc]
for i in list_sub_dir:
    if not os.listdir(i):
        os.rmdir(i)
